name: AxoSyslog nightly

permissions: write-all

on:
  workflow_dispatch:
  pull_request:
  schedule:
    - cron: '00 23 * * *'


jobs:
  # https://github.com/actions/delete-package-versions/issues/90
  cleanup-old-images:
    runs-on: ubuntu-latest
    steps:
      - name: Clean up old images
        uses: actions/github-script@v7
        with:
          script: |
            const nightliesToKeep = 59
            const nightlyTagPattern = /^[0-9.]+_git[0-9]+/

            const package_name = "axosyslog"
            const org = "axoflow"
            const image = `${org}/${package_name}`

            const allPackageVersions = await github.paginate(
                github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg,
                { package_type: "container", package_name: package_name, org: org }
            )

            const nightlyPackageVersions = allPackageVersions.filter((p) => {
                return p.metadata.container && p.metadata.container.tags.length != 0 && p.metadata.container.tags.every((t) => nightlyTagPattern.test(t))
            })

            const oldSnapshotVersions = nightlyPackageVersions.sort((a,b) => new Date(b.updated_at) - new Date(a.updated_at)).slice(nightliesToKeep);

            if (oldSnapshotVersions.length === 0) {
                console.log("Nothing to remove")
                return
            }

            const oldSnapshotTags = oldSnapshotVersions.flatMap(({ metadata }) => metadata.container.tags)

            console.log(`Removing the following images: ${oldSnapshotTags}`)

            const bearerToken = btoa('${{ secrets.GITHUB_TOKEN }}')
            const manifestsRequests = oldSnapshotTags.map((t) => {
                const manifest = fetch(`https://ghcr.io/v2/${image}/manifests/${t}`, {
                    method: "GET",
                    headers: {
                        "Authorization": `Bearer ${{ secrets.GITHUB_TOKEN }}`,
                        "Accept": "application/vnd.docker.distribution.manifest.list.v2+json",
                        "Accept": "application/vnd.docker.distribution.manifest.v2+json",
                        "Accept": "application/vnd.oci.image.manifest.v1+json",
                        "Accept": "application/vnd.oci.image.index.v1+json",
                    },
                }).then((d) => d.json())

                return manifest
            })

            const manifestsResponse = await Promise.all(manifestsRequests)
            const manifestsToDelete = manifestsResponse.filter((m) => m.manifests).flatMap((m) => m.manifests)

            if (manifestsToDelete.length == 0)
              throw new Error('Failed to fetch manifests');

            console.log(`Removing the following manifests: ${manifestsToDelete}`)

            await Promise.all(manifestsToDelete.map((m) => {
                const version = allPackageVersions.find((p) => p.name === m.digest)
                if (!version) {
                    return;
                }

                console.log(`Removing manifest for real: ${version}`)
            }))
