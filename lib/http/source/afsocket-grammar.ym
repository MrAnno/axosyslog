/*
 * Copyright (c) 2002-2012 Balabit
 * Copyright (c) 1998-2012 BalÃ¡zs Scheidler
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As an additional exemption you are allowed to compile & link against the
 * OpenSSL libraries as published by the OpenSSL project. See the file
 * COPYING for details.
 *
 */

%code top {
#include "afsocket-parser.h"

}


%code {

#include "syslog-ng.h"
#include "cfg-parser.h"
#include "afsocket-grammar.h"
#include "afinet-source.h"
#include "afinet-dest.h"
#include "messages.h"
#include "syslog-names.h"
#include "plugin.h"
#include "cfg-grammar.h"
#include "socket-options-inet.h"
#include "transport-mapper-inet.h"
#include "service-management.h"

#include "tlscontext.h"


static SocketOptions *last_sock_options;
static TransportMapper *last_transport_mapper;

TLSContext *last_tls_context;


#if ! SYSLOG_NG_ENABLE_IPV6
#undef AF_INET6
#define AF_INET6 0; g_assert_not_reached()

#endif

static void
afsocket_grammar_set_source_driver(AFSocketSourceDriver *sd)
{
  last_driver = &sd->super.super;

  last_reader_options = &((AFSocketSourceDriver *) last_driver)->reader_options;
  last_sock_options = ((AFSocketSourceDriver *) last_driver)->socket_options;
  last_transport_mapper = ((AFSocketSourceDriver *) last_driver)->transport_mapper;
  last_proto_server_options = &last_reader_options->proto_options.super;
}

static void
afinet_grammar_set_source_driver(AFInetSourceDriver *sd)
{
  afsocket_grammar_set_source_driver(&sd->super);
}

}

%name-prefix "afsocket_"

/* this parameter is needed in order to instruct bison to use a complete
 * argument list for yylex/yyerror */

%lex-param {CfgLexer *lexer}
%parse-param {CfgLexer *lexer}
%parse-param {LogDriver **instance}
%parse-param {gpointer arg}

%token KW_NETWORK

/* INCLUDE_DECLS */

%type   <ptr> driver
%type	<ptr> source_afnetwork
%type	<ptr> source_afnetwork_params
%type   <ptr> source_afsocket_stream_params

%type   <num> inet_ip_protocol_option

%%

start
        : driver
          {
            *instance = $1;
            if (yychar != YYEMPTY)
              cfg_lexer_unput_token(lexer, &yylval);
            YYACCEPT;
          }
        ;

driver
        : LL_CONTEXT_SOURCE source_afnetwork                  { $$ = $2; }
        ;

source_afinet_option
	: KW_LOCALIP '(' string ')'		{ afinet_sd_set_localip(last_driver, $3); free($3); }
	| KW_IP '(' string ')'			{ afinet_sd_set_localip(last_driver, $3); free($3); }
	| KW_LOCALPORT '(' string_or_number ')'	{ afinet_sd_set_localport(last_driver, $3); free($3); }
	| KW_PORT '(' string_or_number ')'	{ afinet_sd_set_localport(last_driver, $3); free($3); }
	| source_reader_option
	| source_driver_option
	| inet_socket_option
	;

source_afsocket_stream_params
	: KW_KEEP_ALIVE '(' yesno ')'		{ afsocket_sd_set_keep_alive(last_driver, $3); }
	| KW_MAX_CONNECTIONS '(' positive_integer ')'	 { afsocket_sd_set_max_connections(last_driver, $3); }
	| KW_LISTEN_BACKLOG '(' positive_integer ')'	{ afsocket_sd_set_listen_backlog(last_driver, $3); }
	;

source_afnetwork
	: KW_NETWORK '(' source_afnetwork_params ')'    { $$ = $3; }
	;

source_afnetwork_params
	:
	  {
            /* we use transport(tcp) transport by default */
            AFInetSourceDriver *d = afinet_sd_new_network(configuration);

            afinet_grammar_set_source_driver(d);
	  }
	  source_afnetwork_options	{ $$ = last_driver; }
        ;

source_afnetwork_options
	: source_afnetwork_option source_afnetwork_options
	|
	;

source_afnetwork_option
        : source_afinet_option
        | source_afsocket_transport
	| source_afsocket_stream_params		{}
	;

source_afsocket_transport
	: afsocket_transport
        | KW_TRANSPORT '(' string
          {
            Plugin *p;
            gint context = LL_CONTEXT_SERVER_PROTO;

            p = cfg_find_plugin(configuration, context, $3);
            if (p)
              {
                /* for transports with grammar */
                if (p->parser)
                  {
                    LogProtoServerFactory *sf = cfg_parse_plugin(configuration, p, &@3, last_proto_server_options);
                    ((AFSocketSourceDriver *) last_driver)->proto_factory = sf;
                  }
              }
            transport_mapper_set_transport(last_transport_mapper, $3);
          }
        ')'	{ free($3); }
	| KW_TLS
	  {
            gchar buf[256];

	    last_tls_context = tls_context_new(TM_SERVER, cfg_lexer_format_location(lexer, &@1, buf, sizeof(buf)));
	  }
	  '(' tls_options ')'
	  {
	    afinet_sd_set_tls_context(last_driver, last_tls_context);
          }
        ;

afsocket_transport
        : KW_TRANSPORT '(' KW_TCP ')'                    { transport_mapper_set_transport(last_transport_mapper, "tcp"); }
        | KW_TRANSPORT '(' KW_UDP ')'                    { transport_mapper_set_transport(last_transport_mapper, "udp"); }
        | KW_TRANSPORT '(' KW_TLS ')'                    { transport_mapper_set_transport(last_transport_mapper, "tls"); }
        | KW_IP_PROTOCOL '(' inet_ip_protocol_option ')' { transport_mapper_set_address_family(last_transport_mapper, $3); }
        ;


tls_options
	: tls_option tls_options
	|
	;

tls_option
        : KW_IFDEF {
}

	| KW_PEER_VERIFY '(' yesno ')'
	  {
	    gint verify_mode = $3 ? (TVM_REQUIRED | TVM_TRUSTED) : (TVM_OPTIONAL | TVM_UNTRUSTED);
	    tls_context_set_verify_mode(last_tls_context, verify_mode);
          }
	| KW_PEER_VERIFY '(' string ')'
	  {
	    CHECK_ERROR(tls_context_set_verify_mode_by_name(last_tls_context, $3), @3,
	                "unknown peer-verify() argument");
            free($3);
          }
	| KW_KEY_FILE '(' string ')'
	  {
	    tls_context_set_key_file(last_tls_context, $3);
            free($3);
          }
	| KW_CERT_FILE '(' string ')'
	  {
	    tls_context_set_cert_file(last_tls_context, $3);
            free($3);
          }
        | KW_DHPARAM_FILE '(' string ')'
          {
            tls_context_set_dhparam_file(last_tls_context, $3);
            free($3);
          }
        | KW_PKCS12_FILE '(' string ')'
          {
            tls_context_set_pkcs12_file(last_tls_context, $3);
            free($3);
          }
	| KW_CA_DIR '(' string ')'
	  {
	    tls_context_set_ca_dir(last_tls_context, $3);
            free($3);
          }
	| KW_CRL_DIR '(' string ')'
	  {
	    tls_context_set_crl_dir(last_tls_context, $3);
            free($3);
          }
        | KW_TRUSTED_KEYS '(' string_list ')'
          {
            tls_session_set_trusted_fingerprints(last_tls_context, $3);
          }
        | KW_TRUSTED_DN '(' string_list ')'
          {
            tls_session_set_trusted_dn(last_tls_context, $3);
          }
	| KW_CIPHER_SUITE '(' string ')'
	  {
            tls_context_set_cipher_suite(last_tls_context, $3);
            free($3);
	  }
        | KW_ECDH_CURVE_LIST '(' string ')'
          {
            tls_context_set_ecdh_curve_list(last_tls_context, $3);
            free($3);
          }
	| KW_SSL_OPTIONS '(' string_list ')'
	  {
            CHECK_ERROR(tls_context_set_ssl_options_by_name(last_tls_context, $3), @3,
                        "unknown ssl-options() argument");
	  }
        | KW_ENDIF {
}
        ;


socket_option
	: KW_SO_SNDBUF '(' nonnegative_integer ')'
	{
		CHECK_ERROR($3 <= G_MAXINT, @3, "Invalid so_sndbuf, it has to be less than %d", G_MAXINT);
		last_sock_options->so_sndbuf = $3;
	}
	| KW_SO_RCVBUF '(' nonnegative_integer ')'
	{
		CHECK_ERROR($3 <= G_MAXINT, @3, "Invalid so_rcvbuf, it has to be less than %d", G_MAXINT);
		last_sock_options->so_rcvbuf = $3;
	}
	| KW_SO_BROADCAST '(' yesno ')'             { last_sock_options->so_broadcast = $3; }
	| KW_SO_KEEPALIVE '(' yesno ')'             { last_sock_options->so_keepalive = $3; }
	;

inet_socket_option
	: socket_option
	| KW_IP_TTL '(' nonnegative_integer ')'               { ((SocketOptionsInet *) last_sock_options)->ip_ttl = $3; }
	| KW_IP_TOS '(' nonnegative_integer ')'               { ((SocketOptionsInet *) last_sock_options)->ip_tos = $3; }
	| KW_IP_FREEBIND '(' yesno ')'              { ((SocketOptionsInet *) last_sock_options)->ip_freebind = $3; }
	| KW_TCP_KEEPALIVE_TIME '(' nonnegative_integer ')'   { ((SocketOptionsInet *) last_sock_options)->tcp_keepalive_time = $3; }
	| KW_TCP_KEEPALIVE_INTVL '(' nonnegative_integer ')'  { ((SocketOptionsInet *) last_sock_options)->tcp_keepalive_intvl = $3; }
	| KW_TCP_KEEPALIVE_PROBES '(' nonnegative_integer ')' { ((SocketOptionsInet *) last_sock_options)->tcp_keepalive_probes = $3; }
	;

inet_ip_protocol_option
        : LL_NUMBER
        {
          CHECK_ERROR($1 == 4 || $1 == 6, @1, "ip-protocol option can only be 4 or 6!");
          if ($1 == 4)
            {
              $$ = AF_INET;
            }
          else
            {
              $$ = AF_INET6;
            }
        }
        ;


/* INCLUDE_RULES */

%%
