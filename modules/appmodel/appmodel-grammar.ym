/*
 * Copyright (c) 2002-2017 Balabit
 * Copyright (c) 1998-2017 Bal√°zs Scheidler
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * As an additional exemption you are allowed to compile & link against the
 * OpenSSL libraries as published by the OpenSSL project. See the file
 * COPYING for details.
 *
 */

%code top {
#include "appmodel.h"
#include "appmodel-parser.h"
}


%code {

#include "cfg-parser.h"
#include "cfg-grammar-internal.h"
#include "messages.h"

}

%define api.prefix {appmodel_}

/* this parameter is needed in order to instruct bison to use a complete
 * argument list for yylex/yyerror */

%lex-param {CfgLexer *lexer}
%parse-param {CfgLexer *lexer}
%parse-param {gpointer *instance}
%parse-param {gpointer arg}

/* INCLUDE_DECLS */

%token KW_APPLICATION
%token KW_TRANSFORMATION
%token KW_TRANSFORM
%token KW_STEP

%type	<ptr> application_definition
%type	<ptr> transformation_definition

%%

start
        : LL_CONTEXT_ROOT application_definition
          {
	    appmodel_register_application(configuration, $2);
            *instance = $2;
            YYACCEPT;
          }
	| LL_CONTEXT_ROOT transformation_definition
          {
	    appmodel_register_transformation(configuration, $2);
            *instance = $2;
            YYACCEPT;
          }
        ;


application_definition
        : KW_APPLICATION string '[' string ']'
          <ptr>{
	    $$ = application_new($2, $4);
          }[app]
	  '{' <ptr>{ $$ = $app; } application_options '}'
	  {
	    $$ = $app;
            free($2);
            free($4);
          }
        ;

application_options
	: application_option semicolons { $<ptr>$ = $<ptr>0; } application_options
	|
	;

application_option
	: KW_FILTER _block_content_context_push LL_BLOCK _block_content_context_pop  { application_set_filter($<ptr>0, $3, &@3); free($3); }
	| KW_PARSER _block_content_context_push LL_BLOCK _block_content_context_pop  { application_set_parser($<ptr>0, $3, &@3); free($3); }
	| KW_FILTERX _block_content_context_push LL_BLOCK _block_content_context_pop  {	application_set_filterx($<ptr>0, $3, &@3); free($3); }
	;


transformation_definition
	: KW_TRANSFORMATION string '[' string ']'
          <ptr>{
            $$ = transformation_new($2, $4);
          }[transformation]
	  '{' <ptr>{ $$ = $transformation; } transformation_options '}'
	  {
	    $$ = $transformation;
            free($2);
            free($4);
          }
	;

transformation_options
	: transformation_option semicolons { $<ptr>$ = $<ptr>0; } transformation_options
	|
	;

/* $0 is Transformation */
transformation_option
        : KW_TRANSFORM '[' string ']' '{' { $<ptr>$ = transform_new($3); } transform_steps '}'
          { free($3); transformation_add_transform($<ptr>0, $<ptr>6); }
        ;

/* $0 is Transform */
transform_steps
	: transform_step semicolons { $<ptr>$ = $<ptr>0; } transform_steps
	|
	;

/* $0 is Transform */
transform_step
	: KW_STEP '[' string ']' '{' KW_FILTERX _block_content_context_push LL_BLOCK _block_content_context_pop semicolons '}'
	  {
	    transform_add_filterx_step($<ptr>0, $3, $8); free($3); free($8);
	  }
	| KW_STEP '[' string ']' '{' KW_PARSER _block_content_context_push LL_BLOCK _block_content_context_pop semicolons '}'
	  {
	    transform_add_parser_step($<ptr>0, $3, $8); free($3); free($8);
	  }
	;

/* INCLUDE_RULES */

%%
