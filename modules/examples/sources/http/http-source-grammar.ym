/*
 * Copyright (c) 2018 Balabit
 * Copyright (c) 2018 László Várady <laszlo.varady@balabit.com>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As an additional exemption you are allowed to compile & link against the
 * OpenSSL libraries as published by the OpenSSL project. See the file
 * COPYING for details.
 *
 */

%code top {
#include "http-source-parser.h"

}


%code {

#include "syslog-ng.h"
#include "cfg-parser.h"
#include "tlscontext.h"
#include "http/source/afinet-source.h"
#include "http/source/socket-options-inet.h"
#include "http/source/transport-mapper-inet.h"
#include "messages.h"
#include "syslog-names.h"
#include "plugin.h"
#include "cfg-grammar.h"
#include "service-management.h"

static void
afsocket_grammar_set_source_driver(AFSocketSourceDriver *sd)
{
  last_driver = &sd->super.super;

  last_reader_options = &((AFSocketSourceDriver *) last_driver)->reader_options;
  _last_sock_options = ((AFSocketSourceDriver *) last_driver)->socket_options;
  _last_transport_mapper = ((AFSocketSourceDriver *) last_driver)->transport_mapper;
  last_proto_server_options = &last_reader_options->proto_options.super;
}

static void
afinet_grammar_set_source_driver(AFInetSourceDriver *sd)
{
  afsocket_grammar_set_source_driver(&sd->super);
}

}

%name-prefix "http_source_"

/* this parameter is needed in order to instruct bison to use a complete
 * argument list for yylex/yyerror */

%lex-param {CfgLexer *lexer}
%parse-param {CfgLexer *lexer}
%parse-param {LogDriver **instance}
%parse-param {gpointer arg}

%token KW_HTTP

/* INCLUDE_DECLS */

%type   <ptr> driver
%type	<ptr> source_http
%type	<ptr> source_http_params

%%

start
  : driver
    {
      *instance = $1;
      if (yychar != YYEMPTY)
        cfg_lexer_unput_token(lexer, &yylval);
      YYACCEPT;
    }
  ;

driver
  : LL_CONTEXT_SOURCE source_http                  { $$ = $2; }
  ;


source_http
	: KW_HTTP '(' source_http_params ')'    { $$ = $3; }
	;

source_http_params
	:
	  {
      AFInetSourceDriver *d = afinet_sd_new_network(configuration);
      afinet_grammar_set_source_driver(d);
	  }
	  http_source_options	{ $$ = last_driver; }
  ;

/* INCLUDE_RULES */

%%
