/*
 * Copyright (c) 2024 Axoflow
 * Copyright (c) 2023-2024 Attila Szakacs <attila.szakacs@axoflow.com>
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * As an additional exemption you are allowed to compile & link against the
 * OpenSSL libraries as published by the OpenSSL project. See the file
 * COPYING for details.
 *
 */

/* START_DECLS */

%code {

#include "grpc-dest.h"
#include "grpc-source.h"
#include "cfg-grammar-internal.h"
#include "plugin.h"

GrpcServerCredentialsBuilderW *last_grpc_server_credentials_builder;
GrpcClientCredentialsBuilderW *last_grpc_client_credentials_builder;

}


%token KW_PORT
%token KW_AUTH
%token KW_INSECURE
%token KW_TLS
%token KW_KEY_FILE
%token KW_CERT_FILE
%token KW_CA_FILE
%token KW_PEER_VERIFY
%token KW_OPTIONAL_UNTRUSTED
%token KW_OPTIONAL_TRUSTED
%token KW_REQUIRED_UNTRUSTED
%token KW_REQUIRED_TRUSTED
%token KW_ALTS
%token KW_TARGET_SERVICE_ACCOUNTS
%token KW_URL
%token KW_ADC
%token KW_SERVICE_ACCOUNT
%token KW_TOKEN_VALIDITY_DURATION
%token KW_KEY
%token KW_SERVICE_ACCOUNT_KEY
%token KW_COMPRESSION
%token KW_BATCH_BYTES
%token KW_CONCURRENT_REQUESTS
%token KW_KEEP_ALIVE
%token KW_TIME
%token KW_TIMEOUT
%token KW_MAX_PINGS_WITHOUT_DATA
%token KW_CHANNEL_ARGS
%token KW_HEADERS
%token KW_SCHEMA
%token KW_PROTOBUF_SCHEMA

%token KW_RESPONSE_ACTION
%token KW_DISCONNECT
%token KW_DROP
%token KW_RETRY
%token KW_SUCCESS
%token KW_OK
%token KW_UNAVAILABLE
%token KW_CANCELLED
%token KW_DEADLINE_EXCEEDED
%token KW_ABORTED
%token KW_OUT_OF_RANGE
%token KW_DATA_LOSS
%token KW_UNKNOWN
%token KW_INVALID_ARGUMENT
%token KW_NOT_FOUND
%token KW_ALREADY_EXISTS
%token KW_PERMISSION_DENIED
%token KW_UNAUTHENTICATED
%token KW_FAILED_PRECONDITION
%token KW_UNIMPLEMENTED
%token KW_INTERNAL
%token KW_RESOURCE_EXHAUSTED
%token KW_PROTO_VAR

%type <num> grpc_server_credentials_builder_tls_peer_verify
%type <num> grpc_dest_response
%type <num> grpc_dest_response_action

/* END_DECLS */

%%

/* START_RULES */

grpc_source_option
  : KW_PORT '(' positive_integer ')' { grpc_sd_set_port(last_driver, $3); }
  | KW_LOG_FETCH_LIMIT '(' nonnegative_integer ')' { grpc_sd_set_fetch_limit(last_driver, $3); }
  | KW_CONCURRENT_REQUESTS '(' positive_integer ')' { CHECK_ERROR($3 >= 2, @1, "concurrent-requests() must be greater than 1"); grpc_sd_set_concurrent_requests(last_driver, $3); }
  | KW_CHANNEL_ARGS '(' grpc_source_channel_args ')'
  | KW_AUTH { last_grpc_server_credentials_builder = grpc_sd_get_credentials_builder(last_driver); } '(' grpc_server_credentials_builder_option ')'
  | threaded_source_driver_option
  | threaded_source_driver_workers_option
  ;

grpc_source_channel_args
  : grpc_source_channel_arg grpc_source_channel_args
  |
  ;

grpc_source_channel_arg
  : string LL_ARROW LL_NUMBER { grpc_sd_add_int_channel_arg(last_driver, $1, $3); free($1); }
  | string LL_ARROW string { grpc_sd_add_string_channel_arg(last_driver, $1, $3); free($1); free($3); }
  ;

grpc_dest_general_option
  : KW_URL '(' string ')' { grpc_dd_set_url(last_driver, $3); free($3); }
  | KW_AUTH { last_grpc_client_credentials_builder = grpc_dd_get_credentials_builder(last_driver); } '(' grpc_client_credentials_option ')'
  | KW_COMPRESSION '(' yesno ')' { grpc_dd_set_compression(last_driver, $3); }
  | KW_BATCH_BYTES '(' positive_integer ')' { grpc_dd_set_batch_bytes(last_driver, $3); }
  | KW_KEEP_ALIVE '(' grpc_keepalive_options ')'
  | KW_CHANNEL_ARGS '(' grpc_dest_channel_args ')'
  | KW_HEADERS '(' grpc_dest_headers ')'
  | KW_RESPONSE_ACTION '(' grpc_dest_response_action_items ')'
  | threaded_dest_driver_general_option
  | threaded_dest_driver_batch_option
  | threaded_dest_driver_workers_option
  | { last_template_options = grpc_dd_get_template_options(last_driver); } template_option
  ;

grpc_dest_schema_option
  : KW_SCHEMA '(' grpc_dest_schema_fields ')'
  | KW_PROTOBUF_SCHEMA '(' path_check LL_ARROW template_content_list ')'
    {
      grpc_dd_set_protobuf_schema(last_driver, $3, $5);
      free($3);
    }
  ;

grpc_dest_schema_fields
  : grpc_dest_schema_field grpc_dest_schema_fields
  |
  ;

grpc_dest_schema_field
  : string optional_string LL_ARROW template_content
    {
      CHECK_ERROR(grpc_dd_add_schema_field(last_driver, $1, $2, $4), @2, "Error adding schema() field, invalid type");
      free($1);
      free($2);
      log_template_unref($4);
    }
  ;

grpc_dest_proto_var_option
  : KW_PROTO_VAR '(' template_name_or_content ')'
    {
      grpc_dd_set_proto_var(last_driver, $3);
      log_template_unref($3);
    }
  ;

grpc_keepalive_options
  : grpc_keepalive_option grpc_keepalive_options
  |
  ;

grpc_keepalive_option
  : KW_TIME '(' nonnegative_integer ')' { grpc_dd_set_keepalive_time(last_driver, $3); }
  | KW_TIMEOUT '(' nonnegative_integer ')' { grpc_dd_set_keepalive_timeout(last_driver, $3); }
  | KW_MAX_PINGS_WITHOUT_DATA '(' nonnegative_integer ')' { grpc_dd_set_keepalive_max_pings(last_driver, $3); }
  ;


grpc_dest_channel_args
  : grpc_dest_channel_arg grpc_dest_channel_args
  |
  ;

grpc_dest_channel_arg
  : string LL_ARROW LL_NUMBER { grpc_dd_add_int_channel_arg(last_driver, $1, $3); free($1); }
  | string LL_ARROW string { grpc_dd_add_string_channel_arg(last_driver, $1, $3); free($1); free($3); }
  ;

grpc_dest_headers
  : grpc_dest_header grpc_dest_headers
  |
  ;

grpc_dest_header
  : string LL_ARROW template_name_or_content
      {
        CHECK_ERROR(grpc_dd_add_header(last_driver, $1, $3), @3, "Failed to set header: templating is not supported");
        free($1);
        log_template_unref($3);
      }
  ;

grpc_dest_response_action_items
  : grpc_dest_response_action_item grpc_dest_response_action_items
  |
  ;

grpc_dest_response_action_item
  : grpc_dest_response LL_ARROW grpc_dest_response_action { grpc_dd_set_response_action(last_driver, $1, $3); }
  ;

grpc_dest_response
  : KW_OK { $$ = GDR_OK; }
  | KW_UNAVAILABLE { $$ = GDR_UNAVAILABLE; }
  | KW_CANCELLED { $$ = GDR_CANCELLED; }
  | KW_DEADLINE_EXCEEDED { $$ = GDR_DEADLINE_EXCEEDED; }
  | KW_ABORTED { $$ = GDR_ABORTED; }
  | KW_OUT_OF_RANGE { $$ = GDR_OUT_OF_RANGE; }
  | KW_DATA_LOSS { $$ = GDR_DATA_LOSS; }
  | KW_UNKNOWN { $$ = GDR_UNKNOWN; }
  | KW_INVALID_ARGUMENT { $$ = GDR_INVALID_ARGUMENT; }
  | KW_NOT_FOUND { $$ = GDR_NOT_FOUND; }
  | KW_ALREADY_EXISTS { $$ = GDR_ALREADY_EXISTS; }
  | KW_PERMISSION_DENIED { $$ = GDR_PERMISSION_DENIED; }
  | KW_UNAUTHENTICATED { $$ = GDR_UNAUTHENTICATED; }
  | KW_FAILED_PRECONDITION { $$ = GDR_FAILED_PRECONDITION; }
  | KW_UNIMPLEMENTED { $$ = GDR_UNIMPLEMENTED; }
  | KW_INTERNAL { $$ = GDR_INTERNAL; }
  | KW_RESOURCE_EXHAUSTED { $$ = GDR_RESOURCE_EXHAUSTED; }
  ;

grpc_dest_response_action
  : KW_DISCONNECT { $$ = GDRA_DISCONNECT; }
  | KW_DROP { $$ = GDRA_DROP; }
  | KW_RETRY { $$ = GDRA_RETRY; }
  | KW_SUCCESS { $$ = GDRA_SUCCESS; }
  ;

grpc_server_credentials_builder_option
  : KW_INSECURE { grpc_server_credentials_builder_set_mode(last_grpc_server_credentials_builder, GSAM_INSECURE); } '(' ')'
  | KW_TLS { grpc_server_credentials_builder_set_mode(last_grpc_server_credentials_builder, GSAM_TLS); } '(' grpc_server_credentials_builder_tls_options ')'
  | KW_ALTS { grpc_server_credentials_builder_set_mode(last_grpc_server_credentials_builder, GSAM_ALTS); } '(' ')'
  ;

grpc_server_credentials_builder_tls_options
  : grpc_server_credentials_builder_tls_option grpc_server_credentials_builder_tls_options
  |
  ;

grpc_server_credentials_builder_tls_option
  : KW_KEY_FILE '(' string ')'
      {
        CHECK_ERROR(grpc_server_credentials_builder_set_tls_key_path(last_grpc_server_credentials_builder, $3), @1, "Failed to set key-file()");
        free($3);
      }
  | KW_CERT_FILE '(' string ')'
      {
        CHECK_ERROR(grpc_server_credentials_builder_set_tls_cert_path(last_grpc_server_credentials_builder, $3), @1, "Failed to set cert-file()");
        free($3);
      }
  | KW_CA_FILE '(' string ')'
      {
        CHECK_ERROR(grpc_server_credentials_builder_set_tls_ca_path(last_grpc_server_credentials_builder, $3), @1, "Failed to set ca-file()");
        free($3);
      }
  | KW_PEER_VERIFY '(' grpc_server_credentials_builder_tls_peer_verify ')'
      {
        grpc_server_credentials_builder_set_tls_peer_verify(last_grpc_server_credentials_builder, $3);
      }
  ;

grpc_server_credentials_builder_tls_peer_verify
  : KW_OPTIONAL_UNTRUSTED { $$ = GSTPV_OPTIONAL_UNTRUSTED; }
  | KW_OPTIONAL_TRUSTED { $$ = GSTPV_OPTIONAL_TRUSTED; }
  | KW_REQUIRED_UNTRUSTED { $$ = GSTPV_REQUIRED_UNTRUSTED; }
  | KW_REQUIRED_TRUSTED { $$ = GSTPV_REQUIRED_TRUSTED; }
  ;

grpc_client_credentials_option
  : KW_INSECURE { grpc_client_credentials_builder_set_mode(last_grpc_client_credentials_builder, GCAM_INSECURE); } '(' ')'
  | KW_TLS { grpc_client_credentials_builder_set_mode(last_grpc_client_credentials_builder, GCAM_TLS); } '(' grpc_client_credentials_builder_tls_options ')'
  | KW_ALTS { grpc_client_credentials_builder_set_mode(last_grpc_client_credentials_builder, GCAM_ALTS); } '(' grpc_client_credentials_builder_alts_options ')'
  | KW_ADC { grpc_client_credentials_builder_set_mode(last_grpc_client_credentials_builder, GCAM_ADC); } '(' grpc_client_credentials_builder_application_credentials ')'
  | KW_SERVICE_ACCOUNT { grpc_client_credentials_builder_set_mode(last_grpc_client_credentials_builder, GCAM_SERVICE_ACCOUNT); } '(' grpc_client_credentials_builder_service_account_options ')'
  ;

grpc_client_credentials_builder_tls_options
  : grpc_client_credentials_builder_tls_option grpc_client_credentials_builder_tls_options
  |
  ;

grpc_client_credentials_builder_tls_option
  : KW_KEY_FILE '(' string ')'
      {
        CHECK_ERROR(grpc_client_credentials_builder_set_tls_key_path(last_grpc_client_credentials_builder, $3), @1, "Failed to set key-file()");
        free($3);
      }
  | KW_CERT_FILE '(' string ')'
      {
        CHECK_ERROR(grpc_client_credentials_builder_set_tls_cert_path(last_grpc_client_credentials_builder, $3), @1, "Failed to set cert-file()");
        free($3);
      }
  | KW_CA_FILE '(' string ')'
      {
        CHECK_ERROR(grpc_client_credentials_builder_set_tls_ca_path(last_grpc_client_credentials_builder, $3), @1, "Failed to set ca-file()");
        free($3);
      }
  ;

grpc_client_credentials_builder_alts_options
  : grpc_client_credentials_builder_alts_option grpc_client_credentials_builder_alts_options
  |
  ;

grpc_client_credentials_builder_alts_option
  : KW_TARGET_SERVICE_ACCOUNTS '(' grpc_client_credentials_builder_alts_target_service_accounts ')'
  ;

grpc_client_credentials_builder_alts_target_service_accounts
  : string
      {
        grpc_client_credentials_builder_add_alts_target_service_account(last_grpc_client_credentials_builder, $1);
        free($1);
      }
    grpc_client_credentials_builder_alts_target_service_accounts
  |
  ;

grpc_client_credentials_builder_service_account_options
  : grpc_client_credentials_builder_service_account_option grpc_client_credentials_builder_service_account_options
  |
  ;

grpc_client_credentials_builder_service_account_option
  : KW_KEY '(' path_secret ')' { grpc_client_credentials_builder_service_account_set_key(last_grpc_client_credentials_builder, $3); free($3); }
  | KW_TOKEN_VALIDITY_DURATION '(' nonnegative_integer64 ')' { grpc_client_credentials_builder_service_account_set_validity_duration(last_grpc_client_credentials_builder, $3); }
  ;

grpc_client_credentials_builder_application_credentials
  : grpc_client_credentials_builder_application_credential grpc_client_credentials_builder_application_credentials
  |
  ;

grpc_client_credentials_builder_application_credential
  : KW_SERVICE_ACCOUNT_KEY '(' path_secret ')' { grpc_client_credentials_builder_set_adc_service_account_key(last_grpc_client_credentials_builder, $3); free($3); }
  ;

/* END_RULES */

%%
